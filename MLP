# -*- coding: utf-8 -*-
"""
Created on Fri May 24 19:38:13 2019

@author: 玉强
"""

import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelEncoder
from tqdm import tqdm
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler

#####################         data preprocessing           #################################
kdd_new = pd.read_csv('D:/NNlearning/code/kddcup.data_new4',names=range(42))
kdd_test = pd.read_csv('D:/NNlearning/code/kddcup.testdata_new4',names=range(42))
kdd_test =kdd_test.drop([136488,136496],axis=0)
y_train = kdd_new[41]
del kdd_new[41]
X_train = kdd_new

y_test = kdd_test[41]
del kdd_test[41]
X_test = kdd_test


label_enc = LabelEncoder()
hot_enc = OneHotEncoder(sparse=False)

label_enc.fit(y_train)
y_train,y_test = label_enc.transform(y_train),label_enc.transform(y_test)
y_train,y_test = y_train.reshape(-1,1),y_test.reshape(-1,1)

hot_enc.fit(y_train)
y_train,y_test = hot_enc.transform(y_train),hot_enc.transform(y_test)
hot_enc = OneHotEncoder(categorical_features = [1,2,3,6,11,13,14,21],sparse=False)

hot_enc.fit(X_train)
X_train = hot_enc.transform(X_train)
X_test = hot_enc.transform(X_test)

def get_random_batch(X,Y,index,batch_size=10):
    np.random.seed(1234)
    ind = np.random.choice(index,(batch_size))
    X_batch = X[ind]
    Y_batch = Y[ind]    
    return X_batch, Y_batch

X_train, y_train = get_random_batch(X_train,y_train,kdd_new.index,100)

scaler = StandardScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test =  scaler.transform(X_test)



#############################   some constants and parameter   s#####################
batch_size = 300
z_dim = 124
Label = 5
LAMBDA = 10
index_train = kdd_new.index
index_test = kdd_test.index
DIS_ITERS = 3#5
is_training = True

X = tf.placeholder(dtype=tf.float32,shape=[None,124],name='X')
y_label = tf.placeholder(dtype=tf.float32,shape=[None,Label],name='y_label')
noise = tf.placeholder(dtype=tf.float32,shape=[None,z_dim],name='noise')
y_noise = tf.placeholder(dtype=tf.float32,shape=[None,Label],name='y_noise')

X_t = tf.placeholder(dtype=tf.float32,shape=[None,124],name='X_t')
keep_prob = tf.placeholder(tf.float32)
#################################   functions  #################################
def lrelu(x,leak=0.2):
    return tf.maximum(x,leak*x)

def sigmoid_cross_entropy_with_logits(x,y):
    return tf.nn.sigmoid_cross_entropy_with_logits(logits=x,labels=y)


def discriminator(X,reuse=None):
    with tf.variable_scope('discriminator', reuse=reuse):
        hd0 = tf.nn.dropout(tf.layers.dense(X, units=1024,activation=tf.nn.sigmoid),keep_prob =1 )
        
    #    hd1 = tf.nn.dropout(tf.layers.dense(hd0, units=248,activation=tf.nn.sigmoid),keep_prob = 0.8)        
        hd2 = tf.nn.dropout(tf.layers.dense(hd0, units=124,activation=tf.nn.sigmoid),keep_prob = 0.8)
        
        hd4 = tf.layers.dense(hd2, units=5,activation = tf.nn.sigmoid)
        return hd4

def predict(y_label,y_pred):
    y_label = np.argmax(y_label,axis=1)
    y_pred = np.argmax(y_pred,axis =1)
    score = accuracy_score(y_label, y_pred)
    print ("Accuracy score:",score)
    return score
    



######################################  loss  ###################################
y_real = discriminator(X)
y_real2 = discriminator(X_t,reuse=True)
#loss_d = tf.losses.mean_squared_error(y_label, y_real)
loss_d = sigmoid_cross_entropy_with_logits(y_label, y_real)

optimizer_d = tf.train.AdamOptimizer(learning_rate=0.0002, beta1=0.5).minimize(loss_d)

    
sess = tf.Session()
sess.run(tf.global_variables_initializer())

loss = {'d': []}

score = 0
for i in tqdm(range(1000)):
        #X_batch, Y_batch = get_random_batch(X_train,y_train,kdd_new.index)
        X_batch, Y_batch = X_train, y_train
        _,d_ls = sess.run([optimizer_d, loss_d], feed_dict={X: X_batch, y_label: Y_batch})
        if i%50==0:
            X_tbatch, Y_tbatch = get_random_batch(X_test,y_test,kdd_test.index,5000)
            y_pred = sess.run(y_real2,feed_dict={X_t:X_tbatch})
            tmp = predict(Y_tbatch,y_pred)
            if tmp>score:
                score = tmp
            loss['d'].append(d_ls)

print('best score:',score)
plt.plot(loss['d'], label='Loss')
plt.legend(loc='upper right')
plt.savefig('Loss_NN.png')
plt.show()
